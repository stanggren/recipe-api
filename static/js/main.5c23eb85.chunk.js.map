{"version":3,"sources":["recipe.module.css","check.js","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","recipe","image","ingredients","title","titleBox","checked","notChecked","Check","state","isChecked","_this2","this","react_default","a","createElement","className","concat","style","onClick","setState","React","Component","Recipe","_ref","calories","dietLabels","Math","round","parseFloat","src","alt","map","ingredient","check","text","App","_useState","useState","_useState2","Object","slicedToArray","recipes","setRecipes","_useState3","_useState4","search","setSearch","_useState5","_useState6","query","setQuery","useEffect","getRecipes","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","fetch","sent","json","hits","console","log","stop","apply","arguments","id","href","onSubmit","e","preventDefault","type","value","onChange","target","src_Recipe","key","label","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c23eb85.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__3KKA2\",\"image\":\"recipe_image__1q6TX\",\"ingredients\":\"recipe_ingredients__1E53H\",\"title\":\"recipe_title__3VsoC\",\"titleBox\":\"recipe_titleBox__2YRJV\",\"checked\":\"recipe_checked__1a9-e\",\"notChecked\":\"recipe_notChecked__3YYeY\"};","import React from \"react\";\r\nimport style from \"./recipe.module.css\";\r\n\r\nclass Check extends React.Component {\r\n  state = {\r\n    isChecked: false\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className={\r\n          this.state.isChecked ? `${style.checked}` : `${style.notChecked}`\r\n        }\r\n        onClick={() => this.setState({ isChecked: !this.state.isChecked })}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Check;\r\n","import React from \"react\";\r\nimport style from \"./recipe.module.css\";\r\nimport Check from \"./check.js\";\r\nimport \"./App.css\";\r\n\r\nconst Recipe = ({ title, calories, image, ingredients, dietLabels }) => {\r\n\r\n\r\n  return (\r\n    <div className={style.recipe}>\r\n      <div className={style.titleBox}>\r\n        <h1>{title}</h1>\r\n      </div>\r\n      <div className=\"navBar\">\r\n        <div className=\"tooltip\">\r\n          <p>Info</p>\r\n          <div className=\"tooltipcontent\">\r\n            <p>Calories: {Math.round(parseFloat(calories))}</p>\r\n            <p>Diet: {dietLabels}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"tooltip\">\r\n          <p>Picture</p>\r\n          <div className=\"imagecontent\">\r\n            <img className=\"image\" src={image} alt=\"\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <ol className={style.ingredients}>\r\n        {ingredients.map(ingredient => (\r\n          <li>\r\n            <Check />\r\n            {ingredient.text}\r\n          </li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n\r\n// NAVBAR Recipe, Cooking-Order, Picture\r\n","import React, {useEffect, useState} from 'react';\r\nimport Recipe from './Recipe';\r\nimport './App.css';\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n  const APP_ID = 'b3867445';\r\n  const APP_KEY = 'b533a7497c9c7246334e3282dc2fe9b7';\r\n\r\n  const [recipes, setRecipes] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [query, setQuery] = useState('chicken');\r\n\r\n  useEffect( () => {\r\n    getRecipes();\r\n  }, [query]);\r\n\r\n  const getRecipes = async () => {\r\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\r\n    const data = await response.json();\r\n    setRecipes(data.hits);\r\n    console.log(data.hits);\r\n  };\r\n\r\n  const updateSearch = e => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n const getSearch = e => {\r\n   e.preventDefault();\r\n   setQuery(search);\r\n   setSearch('');\r\n };\r\n\r\n  return(\r\n    <div className=\"App\">\r\n      <div id=\"header\">\r\n          <h1 id=\"h1-text\">Search recipies</h1>\r\n          <h2>Using an API from <a href=\"https://www.edamam.com/\">edamam.com</a></h2>\r\n      </div>\r\n      <form onSubmit={getSearch} className=\"search-form\">\r\n      <i className=\"fas fa-utensils fa-2x icon\"></i>\r\n        <input \r\n         className=\"search-bar\" \r\n         type=\"text\" \r\n         value={search} \r\n         onChange={updateSearch}\r\n        />\r\n        <button className=\"search-button\" type=\"submit\">\r\n          Search\r\n        </button>\r\n      </form>\r\n      <div className=\"recipes\">\r\n        {recipes.map(recipe =>(\r\n            <Recipe \r\n            key={recipe.recipe.label}\r\n            title={recipe.recipe.label} \r\n            calories={recipe.recipe.calories}\r\n            image={recipe.recipe.image}\r\n            ingredients={recipe.recipe.ingredients}\r\n            dietLabels={recipe.recipe.dietLabels}\r\n            />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}